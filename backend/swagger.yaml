openapi: 3.0.0
info:
  title: Chatting Service API
  version: 1.0.0
  description: API documentation for the Chatting Service App (Go + React)
servers:
  - url: http://localhost:8080
paths:
  /auth/signup:
    post:
      summary: User signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Signup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '500':
          description: Server error
  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
        '500':
          description: Server error
  /auth/logout:
    post:
      summary: User logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized
  /auth/users:
    get:
      summary: Get all users except the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /auth/online-users:
    get:
      summary: Get all online users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of online users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /auth/me:
    get:
      summary: Get current authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /messages:
    post:
      summary: Send a message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sender_id:
                  type: string
                recipient_id:
                  type: string
                content:
                  type: string
                media_url:
                  type: string
                is_broadcast:
                  type: boolean
      responses:
        '201':
          description: Message sent
        '401':
          description: Unauthorized
    get:
      summary: Get messages between two users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: user1
          schema:
            type: string
        - in: query
          name: user2
          schema:
            type: string
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized
  /messages/delivered:
    post:
      summary: Mark a message as delivered
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: message_id
          schema:
            type: string
        - in: query
          name: recipient_id
          schema:
            type: string
      responses:
        '200':
          description: Message marked as delivered
        '401':
          description: Unauthorized
  /messages/read:
    post:
      summary: Mark a message as read
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: message_id
          schema:
            type: string
        - in: query
          name: recipient_id
          schema:
            type: string
      responses:
        '200':
          description: Message marked as read
        '401':
          description: Unauthorized
  /upload:
    post:
      summary: Upload a file
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded
        '401':
          description: Unauthorized
  /download:
    get:
      summary: Download a file
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: file
          schema:
            type: string
      responses:
        '200':
          description: File download
        '401':
          description: Unauthorized
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        is_online:
          type: boolean
    Message:
      type: object
      properties:
        id:
          type: string
        sender_id:
          type: string
        recipient_id:
          type: string
        content:
          type: string
        media_url:
          type: string
        is_broadcast:
          type: boolean
        created_at:
          type: string
        delivered:
          type: boolean
        read:
          type: boolean
